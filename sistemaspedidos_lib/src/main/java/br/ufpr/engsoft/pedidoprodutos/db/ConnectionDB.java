package br.ufpr.engsoft.pedidoprodutos.db;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.InitialContext;
import javax.sql.DataSource;

public class ConnectionDB {
	
	private static ConnectionDB connection;
	
	private Connection conn;
	
	private ConnectionDB() {
		
	}
	/**
	 * Verifica se o banco já foi criado
	 * @param args
	 * @return
	 * @throws SQLException 
	 */
	public boolean verificarBancoExiste() throws SQLException {
		DatabaseMetaData dbm = conn.getMetaData();
		// check if "employee" table is there
		ResultSet tables = dbm.getTables(null, null, "CLIENTE", null);
		if (tables.next()) {
			return true;
		} else {
			return false;
		}
	}
	
	public static ConnectionDB getInstance() {
		synchronized (ConnectionDB.class) {
			if (connection == null) {
				connection = new ConnectionDB();
			}
		}
		
		return connection;
	}
	/**
	 * Usar sem o container web
	 */
	public void conectar() {
		
		try {
			if (conn != null && !conn.isClosed() == true) {
				return; //it's already connected
			}
			
			Class.forName("org.hsqldb.jdbcDriver");

			conn = DriverManager.getConnection("jdbc:hsqldb:file:../mydbpedidos;hsqldb.write_delay=false;shutdown‌​=false", "sa", "");
			System.out.println("Connected "+ !conn.isClosed());
			conn.setAutoCommit(true);
			
			if (this.verificarBancoExiste() == false) {
				this.createDB();
			}

		} catch (SQLException e) {
			throw new RuntimeException("Unable to load database", e);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Usar com pool de conexão do container web
	 * @throws Exception
	 */
	public void conectarPool() throws Exception {
		InitialContext context = new InitialContext();
		DataSource ds = (DataSource) context.lookup("java:comp/env/jdbc/MyDB");
		try {
			conn =  ds.getConnection();
			if (conn.isClosed() == false && this.verificarBancoExiste() == false) {
				this.createDB();
			}
		} catch (SQLException e) {
			throw new Exception(e.getMessage());
		}
	
	}
	
	public void desconectar() {
		try {
			//org.hsqldb.DatabaseManager.closeDatabases(0);
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void setAutoCommit(boolean flag) throws SQLException {
		conn.setAutoCommit(flag);
	}
	
	
	public PreparedStatement prepareSQL(String sql) throws SQLException {
		return conn.prepareStatement(sql);
	}
	
	public void commit() throws SQLException {
		conn.commit();
	}
	
	
	public void createDB() {
		
		try {
			Statement stmt = conn.createStatement();
	        
	        int result = stmt.executeUpdate("CREATE TABLE CLIENTE ( " 
	            + "ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100, INCREMENT BY 1) PRIMARY KEY,"
	            + " CPF VARCHAR(11) NOT NULL UNIQUE, " 
	            + "NOME VARCHAR(30) NOT NULL, SOBRENOME VARCHAR(30) NOT NULL); "
	            + "CREATE TABLE PEDIDO( "
	            + "ID INTEGER PRIMARY KEY, "
	            + "DATA VARCHAR(10) NOT NULL, "
	            + "ID_CLIENTE INT NOT NULL); "
	            + "CREATE TABLE PRODUTO ( "
	            + "ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 300, INCREMENT BY 1) PRIMARY KEY, "
	            + "DESCRICAO VARCHAR(45)); "
	            + "CREATE TABLE ITEM_DO_PEDIDO ( "
	            + "ID_PEDIDO INT NOT NULL,ID_PRODUTO INT NOT NULL, QTDADE INT NOT NULL,"
	            + "PRIMARY KEY (ID_PEDIDO, ID_PRODUTO)); "
	            + "CREATE SEQUENCE SEQ_PEDIDO START WITH 1 INCREMENT BY 1");
	        
	        String sql = "ALTER TABLE PEDIDO "
	        	+ "ADD FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID);";
	        result = stmt.executeUpdate(sql);
	        sql = "ALTER TABLE ITEM_DO_PEDIDO "
		        	+ "ADD FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTO (ID);";
	        result = stmt.executeUpdate(sql);
	        sql = "ALTER TABLE ITEM_DO_PEDIDO "
		        	+ "ADD FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO (ID);";
	        result = stmt.executeUpdate(sql);
	        
	         System.out.println(result);
			// Run script here
		} catch (SQLException e) {
			throw new RuntimeException("Unable to load database", e);
		}
		
	}
	
	

}
